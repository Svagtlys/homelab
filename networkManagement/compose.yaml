services:

  caddy:
    image: lucaslorentz/caddy-docker-proxy:alpine
    container_name: caddy
    user: "${USER_NETWORK}:${USER_DOCKER}"
    cap_add:
      - NET_BIND_SERVICE
    ports:
      - 80:80
      - 443:443
    environment:
      - CADDY_INGRESS_NETWORKS=${NETWORK}
      - CADDY_DOCKER_CADDYFILE_PATH=/data/baseCaddyfile
    networks:
      - ${NETWORK}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${APP_PATH}/caddy-docker-proxy/data:/data
      - ${APP_PATH}/caddy-docker-proxy/config:/config
      - ${TANDOOR_PATH}/mediafiles:/www/tandoor/mediafiles
    restart: unless-stopped


  ddns-updater:
    image: qmcgaw/ddns-updater:latest
    container_name: ddns-updater
    user: "${USER_NETWORK}:${USER_DOCKER}" #requires custom build
    network_mode: bridge
    ports:
      - ${API_PORT_DDNSUPDATER}:8000/tcp
    volumes:
      - ${APP_PATH}/ddns-updater/:/updater/data
    environment:
      - PERIOD=5m
      - UPDATE_COOLDOWN_PERIOD=5m
      - PUBLICIP_FETCHERS=all
      - PUBLICIP_HTTP_PROVIDERS=all
      - PUBLICIPV4_HTTP_PROVIDERS=all
      - PUBLICIPV6_HTTP_PROVIDERS=all
      - PUBLICIP_DNS_PROVIDERS=all
      - PUBLICIP_DNS_TIMEOUT=3s
      - HTTP_TIMEOUT=10s
      - TZ=${TZ}
      
      # Web UI
      - LISTENING_PORT=8000
      - ROOT_URL=/

      # Backup
      - BACKUP_PERIOD=0 # 0 to disable
      - BACKUP_DIRECTORY=/updater/data

      # Other
      - LOG_LEVEL=info
      - LOG_CALLER=hidden
    restart: always


  gluetun:
    image: qmcgaw/gluetun
    container_name: gluetun
    cap_add:
      - NET_ADMIN
    networks:
      vpn_network:
        ipv4_address: ${GLUETUN_IPV4}
    ports:
      - ${GUI_PORT_PROWLARR}:9696     # Prowlarr
      - ${GUI_PORT_QBITTORRENT}:${GUI_PORT_QBITTORRENT}    # qbittorrent GUI
    volumes:
      - ${APP_PATH}/gluetun:/gluetun
    environment:
      - VPN_SERVICE_PROVIDER=custom
      - VPN_TYPE=openvpn
      - OPENVPN_USER=${USERNAME_OPENVPN}
      - OPENVPN_PASSWORD=${PASSWORD_OPENVPN}
      - OPENVPN_CUSTOM_CONFIG=${CONFIG_OPENVPN}
      - TZ=${TZ}
      - FIREWALL_OUTBOUND_SUBNETS=${GLUETUN_OUTBOUND_SUBNETS}
    restart: unless-stopped

  deunhealth:
    build: .
    image: qmcgaw/deunhealth
    container_name: deunhealth
    network_mode: "none"
    environment:
      - LOG_LEVEL=info
      - HEALTH_SERVER_ADDRESS=127.0.0.1:9999
      - TZ=${TZ}
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    user: "${USER_NETWORK}:${USER_DOCKER}"
    restart: always
    environment:
      DOMAIN: ${GUI_URL_VAULTWARDEN}  # Your domain; vaultwarden needs to know it's https to work properly with attachments
      SIGNUPS_ALLOWED: false
      PUSH_ENABLED: true
      PUSH_INSTALLATION_ID: ${VAULTWARDEN_ID}
      PUSH_INSTALLATION_KEY: ${VAULTWARDEN_KEY}
    volumes:
      - ${APP_PATH}/vaultwarden/:/data
    networks:
      - ${NETWORK}
    labels:
      caddy: ${GUI_URL_VAULTWARDEN}
      caddy.reverse_proxy: "{{upstreams 80}}"
      caddy.reverse_proxy.header_up: X-Real-IP {remote}
      deunhealth.restart.on.unhealthy: true


  postgresql:
    image: docker.io/library/postgres:12-alpine
    container_name: auth-postgres
    user: "${USER_NETWORK}"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ${APP_PATH}/postgresql:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}

  redis:
    image: docker.io/library/redis:alpine
    container_name: auth-redis
    user: "${USER_NETWORK}"
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ${APP_PATH}/redis:/data

  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.4.2}
    restart: unless-stopped
    container_name: auth-server
    command: server
    user: "${USER_NETWORK}"
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    volumes:
      - ${APP_PATH}/authentik/media:/media
      - ${APP_PATH}/authentik/custom-templates:/templates
    ports:
      - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    depends_on:
      - postgresql
      - redis

  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.4.2}
    restart: unless-stopped
    command: worker
    container_name: auth-worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    user: "${USER_NETWORK}:999"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${APP_PATH}/authentik/media:/media
      - ${APP_PATH}/authentik/certs:/certs
      - ${APP_PATH}/authentik/custom-templates:/templates
    depends_on:
      - postgresql
      - redis


networks:
  caddy:
    external: true
  vpn_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.9.8.0/24
