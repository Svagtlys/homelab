services:


  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=${USER_QBITTORRENT}
      - PGID=${USER_QBITTORRENT}
      - UMASK=000
      - WEBUI_PORT=${GUI_PORT_QBITTORRENT}
      - TZ=${TZ}
    volumes:
      - ${APP_PATH}/qbittorrent:/config
      - ${PATH_NAS_SSD}/unfinished:/downloads
      - ${PATH_NAS_SSD}/unfinished/movies:/downloads/movies
      - ${PATH_NAS_SSD}/unfinished/shows:/downloads/shows
    network_mode: "container:gluetun"
    healthcheck:
      test: "nc -z localhost 9999"
      interval: 1m
      timeout: 1m
    restart: always
    labels:
      deunhealth.restart.on.unhealthy: true

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${USER_WORKINGMEDIA}
      - PGID=${USER_WORKINGMEDIA}
      - TZ=${TZ}
    volumes:
      - ${APP_PATH}/prowlarr:/config
    network_mode: "container:gluetun"
    healthcheck:
      test: "nc -z localhost 9999"
      interval: 1m
      timeout: 1m
    restart: always
    labels:
      deunhealth.restart.on.unhealthy: true


  radarr:
    image: ghcr.io/linuxserver/radarr
    container_name: radarr
    depends_on:
      - prowlarr
    environment:
      - PUID=${USER_WORKINGMEDIA}
      - PGID=${USER_WORKINGMEDIA}
      - UMASK=002
      - TZ=${TZ}
    ports:
      - ${GUI_PORT_RADARR}:7878     # Radarr (custom:real)
    volumes:
      - ${APP_PATH}/radarr:/config
      - ${PATH_NAS_HDD}/finished/movies:/movies
      - ${PATH_NAS_SSD}/unfinished/:/downloads
    networks:
      - ${NETWORK}
    labels:
      caddy: ${GUI_URL_RADARR}
      caddy.import: local-only "{{upstreams 7878}}"
      deunhealth.restart.on.unhealthy: true
    restart: unless-stopped



  sonarr:
    image: ghcr.io/linuxserver/sonarr
    container_name: sonarr
    depends_on:
      - prowlarr
    environment:
      - PUID=${USER_WORKINGMEDIA}
      - PGID=${USER_WORKINGMEDIA}
      - UMASK=002
      - TZ=${TZ}
    ports:
      - ${GUI_PORT_SONARR}:8989     # Sonarr (custom:real)
    volumes:
      - ${APP_PATH}/sonarr:/config
      - ${PATH_NAS_HDD}/finished/shows/anime:/tv/anime
      - ${PATH_NAS_HDD}/finished/shows/live-action:/tv/live-action
      - ${PATH_NAS_SSD}/unfinished/:/downloads
    networks:
      - ${NETWORK}
    labels:
      caddy: ${GUI_URL_SONARR}
      caddy.import: local-only "{{upstreams 8989}}"
      deunhealth.restart.on.unhealthy: true
    restart: unless-stopped

  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    environment:
      - PUID=${USER_WORKINGMEDIA}
      - PGID=${USER_WORKINGMEDIA}
      - UMASK=002
      - TZ=${TZ}
    volumes:
      - ${APP_PATH}/lidarr:/config
      - ${PATH_NAS_HDD}/finished/music/:/music
      - ${PATH_NAS_SSD}/unfinished/:/downloads
    ports:
      - ${GUI_PORT_LIDARR}:8686
    restart: unless-stopped
    networks:
      - ${NETWORK}
    labels:
      caddy: ${GUI_URL_LIDARR}
      caddy.import: local-only "{{upstreams 8686}}"
      deunhealth.restart.on.unhealthy: true


  unpackerr:
    image: golift/unpackerr
    container_name: unpackerr
    security_opt:
      - no-new-privileges:true
    volumes:
      - ${PATH_NAS_SSD}/unfinished/shows:/downloads/shows
      - ${PATH_NAS_SSD}/unfinished/movies:/downloads/movies
    # Get the user:group correct so unpackerr can read and write to your files.
    user: ${USER_QBITTORRENT}:${USER_WORKINGMEDIA}
    environment:
      - TZ=${TZ}
      # General config
      - UN_DEBUG=false
      - UN_LOG_FILE=
      - UN_LOG_FILES=10
      - UN_LOG_FILE_MB=10
      - UN_INTERVAL=2m
      - UN_START_DELAY=1m
      - UN_RETRY_DELAY=5m
      - UN_MAX_RETRIES=3
      - UN_PARALLEL=1
      - UN_FILE_MODE=0644
      - UN_DIR_MODE=0755
      # Sonarr Config
      - UN_SONARR_0_URL=${GUI_PORT_BASE}:${GUI_PORT_SONARR}
      - UN_SONARR_0_API_KEY=${API_KEY_SONARR}
      - UN_SONARR_0_PATHS_0=/downloads/shows
      - UN_SONARR_0_PROTOCOLS=torrent
      - UN_SONARR_0_TIMEOUT=10s
      - UN_SONARR_0_DELETE_ORIG=false
      - UN_SONARR_0_DELETE_DELAY=5m
      # Radarr Config
      - UN_RADARR_0_URL=${GUI_PORT_BASE}:${GUI_PORT_RADARR}
      - UN_RADARR_0_API_KEY=${API_KEY_RADARR}
      - UN_RADARR_0_PATHS_0=/downloads/movies
      - UN_RADARR_0_PROTOCOLS=torrent
      - UN_RADARR_0_TIMEOUT=10s
      - UN_RADARR_0_DELETE_ORIG=false
      - UN_RADARR_0_DELETE_DELAY=5m
    networks:
      - ${NETWORK}
    restart: unless-stopped
    labels:
      deunhealth.restart.on.unhealthy: true


  ytdl-sub:
    image: ghcr.io/jmbannon/ytdl-sub:latest
    container_name: ytdl-sub
    environment:
      - PUID=${USER_WORKINGMEDIA}
      - PGID=${USER_WORKINGMEDIA}
      - TZ=${TZ}
      - DOCKER_MODS=linuxserver/mods:universal-cron
    volumes:
      - ${APP_PATH}/ytdl-sub/config:/config
      - ${PATH_NAS_HDD}/finished/shows:/tv_shows  # optional
      - ${PATH_NAS_HDD}/finished/movies:/movies  # optional
      - ${PATH_NAS_SSD}/finished/music:/music  # optional
    healthcheck:
      interval: 60m
      retries: 10
      test:
        - CMD
        - tail -n 1 /config/latest_summary.txt | grep -q Success
      timeout: 45s
    restart: unless-stopped
    labels:
      deunhealth.restart.on.unhealthy: true


  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    user: ${USER_READYMEDIA}:${USER_READYMEDIA}
    environment:
        - LOG_LEVEL=info
        - TZ=${TZ}
    ports:
        - ${GUI_PORT_JELLYSEERR}:5055
    volumes:
        - ${APP_PATH}/jellyseerr:/app/config
    networks:
      - ${NETWORK}
    labels:
      caddy_0: ${GUI_URL_JELLYSEERR}
      caddy_0.reverse_proxy: "{{upstreams 5055}}"
      caddy_1: ${GUI_URL2_JELLYSEERR}
      caddy_1.redir: https://${GUI_URL_JELLYSEERR} permanent
      deunhealth.restart.on.unhealthy: true
    restart: 'unless-stopped'


  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    user: ${USER_READYMEDIA}:${USER_READYMEDIA}
    environment:
      - JELLYFIN_PublishedServerUrl=https://${GUI_URL_JELLYFIN}
    ports:
      - "${GUI_PORT_JELLYFIN}:8096" #HTTP
      - "1900:1901" #Service auto-discovery
      - "7359:7359" #Client discovery
    volumes:
      - ${APP_PATH}/jellyfin/config:/config
      - ${APP_PATH}/jellyfin/cache:/cache
      - ${PATH_NAS_HDD}/finished:/media
      - ${APP_PATH}/jellyfin/config/web-config.json:/jellyfin/jellyfin-web/config.json
    networks:
      - ${NETWORK}
    labels:
      caddy_0: ${GUI_URL_JELLYFIN}
      caddy_0.reverse_proxy: "{{upstreams 8096}}"
      caddy_1: ${GUI_URL2_JELLYFIN}
      caddy_1.redir: https://${GUI_URL_JELLYFIN} permanent
      deunhealth.restart.on.unhealthy: true
    restart: 'unless-stopped'


  hyperion-ng:
    image: hyperion-ng:latest
    container_name: hyperion-ng
    environment:
      - PUID=${USER_READYMEDIA}
      - PGID=${USER_READYMEDIA}
      - TZ=${TZ}
    ports:
      - "${GUI_PORT_HYPERIONNG}:8090"
      - "19444:19444"
      - "19445:19445"
    volumes:
      - ${APP_PATH}/hyperion-ng/:/config
    networks:
      - ${NETWORK}
    labels:
      caddy: ${GUI_URL_HYPERIONNG}
      caddy.import: local-only "{{upstreams 8090}}"
      deunhealth.restart.on.unhealthy: true
    healthcheck:
      test: "nc -vz ${WLED_IP} 80"
      interval: 1m
      timeout: 1m


  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=${USER_WORKINGMEDIA}
      - PGID=${USER_WORKINGMEDIA}
      - TZ=${TZ}
    volumes:
      - ${APP_PATH}/readarr:/config
      - ${PATH_NAS_HDD}/finished/literature:/books
      - ${PATH_NAS_SSD}/unfinished/:/downloads
    ports:
      - ${GUI_PORT_READARR}:8787
    restart: unless-stopped
    networks:
      - ${NETWORK}
    labels:
      caddy: ${GUI_URL_READARR}
      caddy.import: local-only "{{upstreams 8787}}"
      deunhealth.restart.on.unhealthy: true


networks:
  caddy:
    external: true
